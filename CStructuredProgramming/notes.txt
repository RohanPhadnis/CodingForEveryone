Native Data Types: int, float, char, double


Enumeration:
Creation of a user-defined types
Makes debugging easier - code becomes safer
C is a weakly typed language because implicit conversion is common.
enum day {sun, mon, tues, wed, thu, fri, sat};
enum day today = fri;
default initialization:
- sun == 0
- mon == 1
- ...
- sat == 6
enum is a form of int type


Switch Statements:
switch (<expression>) {
    case <value1>: <statement>; break;
    case <value2>: <statement>; break;
    ...
    case <valuen>: <statement>; break;
    default: <statement>;
}
case statements test if the expression is equal to the constant values
default statement executes if none of the cases are satisfied
break keyword exits the switch statement
flow-through behavior: without break statement, all following cases will get executed


Type Definition Identifier
typedef <original_datatype> <new_datatype>;
The original_datatype can now be referenced with the <new_datatype> identifier


Preprocessor Commands
- sharp sign (#) indicates a preprocessor command
#include <lib.h>
- imports a library into program
#define NAME value
- macro facility: used to define constants in a large scope (typically an uppercase identifier)
examples:
- #define PI 3.14159   // constant definition
- #define EQ ==     // syntactic sugar; replaces == operator with EQ; a EQ b instead of a == b
- #define SQ(x) ((x)*(x))    // textually replaces x*x with SQ(x); parenthesis are not implied - need to be around (x)


Library Commands
    * stdio.h
        - printf(): formatted print
        - scanf("%<f>", &var): input collection from console
            - <f> is a string formatting types
            - var is a variable to be assigned the inputted value
        - #define getchar() getc(stdin)
            - gets characters from input
            - can also specify file name in getc() to read from file
        - #define putchar(c) putc((c), stdout)
            - puts char in output
            - allows for char-by-char processing (includes whitespace)
        - FILE
            - file structure in <sdtio.h> to interface with files
        - fopen(char file_name[], char mode[])
            - opens file given name as a string
            - mode
                - r: read
                - w: write
                - a: append
                -r+: read plus
                - w+: write plus
                - a+: append plus
            - returns a FILE* pointer
        - fscanf(FILE* file, char format[], *var)
            - similar to scanf, except reads from a file
            - returns 0 when can no longer read values
        - fclose(FILE* file)
            - closes an opened file
        - rewind(FILE* file)
            - rewinds the cursor to read file from the begininning
    * stdlib.h
        - int abs(long int x): returns absolute value of x
        - int rand(): returns a pseudorandom number from 0 to RAND_MAX (inclusive)
        - void srand(unsigned int seed): defines seed for psuedorandom number generator
        - malloc(size): accesses the heap, creates a memory object of the specified size, and returns a pointer
    * time.h
    * assert.h
        - assert(<boolean>): aborts the program if the specified boolean value is false
        - #define NDEBUG  // macro facility placed BEFORE #include <assert.h> that stops all asserts from working
        - gcc -DNDEBUG file.c: complies with NDEBUG
    * ctype.h
        - isalpha(c): returns 1 if the char is a capital/lower alphabet, 0 otherwise
        - isspace(c): returns 1 if the char is whitespace, 0 otherwise
        - isdigit(c): returns 1 if the char is a digit, 0 otherwise
        - islower(c): returns 1 if the char is a lowercase alphabet, 0 otherwise
        - toupper(c): returns uppercase of character


Structures
ADT - abstract data type (user defined data type)
struct tag-name {
    declarator-list;
}
- declarator-list: declarations of attributes (dtype identifier;)
typedef struct {} class-name;   // do not need to use struct class-name every time
instantiation: class-name obj-name {initial_attribute_values}
access:
- obj-name.attribute-name
- struct class-name * pointer;
- pointer = &obj-name;
- pointer -> attribute-name = value;
- *pointer.attribute-name


Operator Precedence
CATEGORY        |               OPERATOR               |   ASSOCIATIVITY
Postfix         |  () [] -> . ++ --                    |   Left to Right
Unary           |  + - ! ~ ++ -- (type) * & sizeof     |   Right to Left
Multiplicative  |  * / %                               |   Left to Right
Additive        |  + -                                 |   Left to Right
Shift           |  << >>                               |   Left to Right
Relational      |  < <= > >=                           |   Left to Right
Equality        |  == !=                               |   Left to Right
Bitwise AND     |  &                                   |   Left to Right
Bitwise XOR     |  ^                                   |   Left to Right
Bitwise OR      |  |                                   |   Left to Right
Logical AND     |  &&                                  |   Left to Right
Logical OR      |  ||                                  |   Left to Right
Conditional     |  ?:                                  |   Right to Left
Assignment      |   = += -= *= /= %= >>= <<= &= ^= |=  |   Right to Left
Comma           |   ,                                  |   Left to Right


Stack Data Structure
LIFO Philosophy
Canonical non-trivial data structure
operations: push, pop, top, empty, full, reset
attributes: stack data, top


Linked List
Data structure in which each element contains a pointer to the next element.
Head - first element
Tail - last element
Singly-linked list: has one pointer to the very next element.
Doubly-linked list: has a pointer to the element before and the element after.
Operations:
    - count - counts the number of elements in the list
    - concat - concatenates two lists
    - insert - inserts data at a specified index
    - delete - deletes by index position


Binary Trees
Node - unit of data in a tree
Root - entry node into a tree
Branch - connection from parent node to child node
Leaf - node at the end of tree
Binary Tree - tree such that nodes have at most 2 branches
Complete Binary Tree - each node, except for leaf has 2 nodes (grows at 2^n nodes per level)
If less than node, goes left. Else, goes right.
For sorted tree, operation complexity is log2(n)
Traversals:
    - In Order: left, center, right
    - Preorder: center, left, right
    - Postorder: left, right, center


Advanced I/O
So far:
    - printf (stdout > screen)
    - scanf (stdin < keyboard)
code.exe > file
    - defines stdout file output
code.exe < file
    - defines stdin file input
printf(control_string, arguments)
    - control_string: string to be printed out, with data type formatting
    - arguments: data to be formatted into string
Char        |   Display
%i or %d    |   Integer
%u          |   Unsigned Integer
%o          |   Octal Integer
%x          |   Hexadecimal Integer (using a-f)
%X          |   Hexadecimal Integer (using A-F)
%f or %F    |   Floating-point Number (6 decimal places, default)
%e or %E    |   Floating-point Number (with exponent, e with %e, E with %E)
%g          |   Floating-point Number (in f or e format)
%G          |   Floating-point Number (in f or E format)
%a or %A    |   Floating-point Number in Hexadecimal format 0xd.ddddpÂ±d
%c          |   Single Character
%s          |   Null-terminated String
%p          |   Pointer
%n          |   No printing; stores number of characters in print in pointed int argument
%%          |   Prints percent sign


Command Line Arguments
input file -> process -> output file
int main(int argc, char* argv[])
    - main method can have 2 special arguments
        - argc = count of arguments (including executable)
        - argv = vector of args as strings
eg: ./double_space.c input_file output_file
    - argc = 3
    - argv = {"double.c", "input_file", "output_file"}
